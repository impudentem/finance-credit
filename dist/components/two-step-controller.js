// Generated by CoffeeScript 1.12.5
var twoStepController;

twoStepController = (function() {
  function twoStepController($http, $scope, $rootScope, $sce, $location, $element, $sceDelegate, $filter, $timeout) {
    this.$http = $http;
    this.$scope = $scope;
    this.$rootScope = $rootScope;
    this.$sce = $sce;
    this.$location = $location;
    this.$element = $element;
    this.$sceDelegate = $sceDelegate;
    this.$filter = $filter;
    this.$timeout = $timeout;
    this.calendar = {};
    this.$scope.$watch((function(_this) {
      return function(newValue, oldValue, scope) {
        return _this.$scope.main.currentStep;
      };
    })(this), (function(_this) {
      return function(newValue, oldValue, scope) {
        _this.$iElement = $(_this.$element);
        newValue = parseInt(newValue);
        if (newValue === 2) {
          _this.init();
        }
        return false;
      };
    })(this));
  }

  twoStepController.prototype.card_hover = function($event, card) {
    return this.$scope.cards_two.card_hover = $event.type === "mouseover" ? card : "";
  };

  twoStepController.prototype.init = function() {
    var maxDate, minDate;
    minDate = new Date();
    maxDate = new Date();
    maxDate.setFullYear(maxDate.getFullYear() - 18);
    minDate.setFullYear(minDate.getFullYear() - 90);
    this.initCal = (function(_this) {
      return function() {
        _this.calendar = _this.$iElement.find(".ui.calendar").calendar({
          type: "date",
          firstDayOfWeek: 1,
          ampm: false,
          minDate: minDate,
          maxDate: maxDate,
          disableMinute: true,
          className: {
            prevIcon: "open icon left",
            nextIcon: "open icon right"
          },
          text: {
            days: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С'],
            months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
            monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
            today: 'Сегодня',
            now: 'Сейчас',
            am: 'AM',
            pm: 'PM'
          },
          onChange: function(date, text, mode) {
            _this.$scope.$storage.strgData.bday = text;
            if (!_this.$scope.$$phase) {
              return _this.$scope.$apply();
            }
          },
          formatter: {
            date: function(date, settings) {
              if (!date) {
                return "";
              }
              return date.toLocaleString().split(',')[0];
            }
          }
        });
        return _this.initMask();
      };
    })(this);
    return this.$timeout((function(_this) {
      return function() {
        return _this.initCal();
      };
    })(this));
  };

  twoStepController.prototype.initMask = function() {
    var param;
    param = {
      mask: "+38 (\\099) 999-99-99",
      greedy: false,
      showMaskOnHover: false,
      oncomplete: (function(_this) {
        return function(e) {
          return _this.$scope.$storage.strgData.phone = e.target.value;
        };
      })(this)
    };
    $('input[name="phone"]').inputmask(param);
    this.$scope.main.loading = false;
    return $(this.$element).find("form").form({
      inline: true,
      on: "blur",
      fields: {
        fullname: {
          identifier: "fullname",
          rules: [
            {
              type: "regExp[/^[а-яёієыї\\-\\']*\\s[а-яёієыї\\-\\']*\\s[а-яёієыї\\-\\']*$/i]",
              prompt: "Введены недопустимые символы"
            }
          ]
        },
        bday: {
          identifier: "bday",
          rules: [
            {
              type: "regExp[/^\\d{2}[\\.]\\d{2}[\\.]\\d{4}$/i]",
              prompt: "Неправильная дата рождения"
            }
          ]
        },
        phone: {
          identifier: "phone",
          rules: [
            {
              type: "empty",
              prompt: "Неправильный номер телефона"
            }
          ]
        },
        aggree: {
          identifier: "aggree",
          rules: [
            {
              type: "checked",
              prompt: "Так мы не сможем обработать Ваш запрос"
            }
          ]
        }
      },
      onSuccess: (function(_this) {
        return function(e, f) {
          _this.$scope.main.loading = true;
          _this.$location.path("/s3");
          return false;
        };
      })(this)
    });
  };

  return twoStepController;

})();
