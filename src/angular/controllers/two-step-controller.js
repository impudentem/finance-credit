// Generated by CoffeeScript 1.12.5
var twoStepController;

twoStepController = (function() {
  function twoStepController($http, $scope, $rootScope, $sce, $location, $element, $sceDelegate, $filter, $timeout) {
    this.$http = $http;
    this.$scope = $scope;
    this.$rootScope = $rootScope;
    this.$sce = $sce;
    this.$location = $location;
    this.$element = $element;
    this.$sceDelegate = $sceDelegate;
    this.$filter = $filter;
    this.$timeout = $timeout;
    this.calendar = {};
    this.$scope.$watch((function(_this) {
      return function(newValue, oldValue, scope) {
        return _this.$scope.main.currentStep;
      };
    })(this), (function(_this) {
      return function(newValue, oldValue, scope) {
        _this.$iElement = $(_this.$element);
        newValue = parseInt(newValue);
        if (newValue === 2) {
          return _this.init();
        }
      };
    })(this));
  }

  twoStepController.prototype.card_hover = function($event, card) {
    return this.$scope.cards_two.card_hover = $event.type === "mouseover" ? card : "";
  };

  twoStepController.prototype.formatter = function(date) {
    var day, month, year;
    if (!date) {
      return "";
    }
    day = "" + (date.getDate());
    month = "" + (date.getMonth() + 1);
    day = day.length < 2 ? "0" + (date.getDate()) : "" + (date.getDate());
    month = month.length < 2 ? "0" + (date.getMonth() + 1) : "" + (date.getMonth() + 1);
    year = "" + (date.getFullYear());
    return day + "." + month + "." + year;
  };

  twoStepController.prototype.init = function() {
    this.calendar = {};
    this.minDate = new Date();
    this.maxDate = new Date();
    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);
    this.minDate.setFullYear(this.minDate.getFullYear() - 90);
    this.initCal = (function(_this) {
      return function() {
        _this.calendar = _this.$iElement.find("button.daterange").daterangepicker({
          singleDatePicker: true,
          locale: {
            format: "DD.MM.YYYY",
            separator: " - ",
            applyLabel: "Ок",
            cancelLabel: "Отмена",
            fromLabel: "С",
            toLabel: "По",
            customRangeLabel: "Custom",
            weekLabel: "W",
            daysOfWeek: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С'],
            monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
            firstDay: 1
          },
          opens: "left",
          minDate: _this.formatter(_this.minDate),
          maxDate: _this.formatter(_this.maxDate),
          startDate: _this.$scope.$storage.strgData.bday ? moment(_this.$scope.$storage.strgData.bday, "DD.MM.YYYY").toDate() : _this.minDate
        }, function(start, end, label) {
          var form;
          form = $(_this.$element).find(".ui.form");
          form = form.data("module-form");
          _this.bday = start.format("DD.MM.YYYY");
          _this.$scope.$storage.strgData.bday = start.format("DD.MM.YYYY");
          if (!_this.$scope.$$phase) {
            _this.$scope.$apply();
          }
          if (form && form.is.valid() !== true) {
            return form.validate.form();
          }
        });
        _this.calendar_input = _this.$iElement.find("input[name='bday']").on("change", function(e) {
          return _this.calendar.data("daterangepicker").setStartDate(_this.calendar_input.inputmask("isComplete") ? moment(e.target.value, "DD.MM.YYYY").toDate() : _this.minDate);
        }).inputmask({
          placeholder: "__.__.____",
          alias: "dd.mm.yyyy",
          yearrange: {
            minyear: _this.minDate.getFullYear(),
            maxyear: _this.maxDate.getFullYear()
          },
          greedy: false,
          showMaskOnHover: false
        });
        if (_this.$scope.$storage.strgData.bday) {
          _this.calendar_input.val(_this.$scope.$storage.strgData.bday);
        }
        return _this.initMask();
      };
    })(this);
    return this.$timeout((function(_this) {
      return function() {
        return _this.initCal();
      };
    })(this));
  };

  twoStepController.prototype.prevStep = function() {
    this.$scope.main.$location.path('/s1');
    return this.$scope.main.loading = true;
  };

  twoStepController.prototype.nextStep = function() {
    var form;
    form = $(this.$element).find(".ui.form");
    form = form.data("module-form");
    if (form && form.is.valid()) {
      this.$scope.main.loading = true;
      this.$location.path("/s3");
      if (!this.$scope.$$phase) {
        return this.$scope.$apply();
      }
    } else if (form) {
      return form.validate.form();
    }
  };

  twoStepController.prototype.initMask = function() {
    var _mobMask, _nameMask, _t, alternatCodePhone, alternatCodePhoneMask, code;
    if (this.$scope.$storage.strgData.aggree === void 0) {
      this.$scope.$storage.strgData.aggree = true;
    }
    alternatCodePhone = [39, 50, 63, 66, 67, 68, 73, 91, 92, 93, 94, 95, 96, 97, 98, 99];
    alternatCodePhoneMask = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = alternatCodePhone.length; i < len; i++) {
        code = alternatCodePhone[i];
        results.push({
          mask: "+38 (0" + code + ") ###-##-##",
          cc: "UA",
          cd: "Ukraine"
        });
      }
      return results;
    })();
    _mobMask = $('input[name="phone"]');
    _t = this;
    _mobMask.mask("+38 (099) 999-99-99", {
      completed: function() {
        return _t.$scope.$storage.strgData.phone = this.val();
      }
    });
    _nameMask = new Inputmask("U{1,64} (U{1,64})|(U{1,64} U{1,64})", {
      greedy: false,
      showMaskOnHover: false,
      oncomplete: (function(_this) {
        return function(e) {
          return _this.$scope.$storage.strgData.name = e.target.value;
        };
      })(this)
    });
    _nameMask.mask($('input[name="fullname"]')[0]);
    this.$scope.main.loading = false;
    return $(this.$element).find(".ui.form").form({
      inline: true,
      on: "blur",
      fields: {
        fullname: {
          identifier: "fullname",
          rules: [
            {
              type: "regExp[/^([а-яёієыї\\-\\']+\\s[а-яёієыї\\-\\']+)?(\\s[а-яёієыї\\-\\']+)?$/i]",
              prompt: "Введены недопустимые символы"
            }, {
              type: "empty",
              prompt: "Укажите Имя и Фамилию"
            }
          ]
        },
        bday: {
          identifier: "bday",
          rules: [
            {
              type: "regExp[/^\\d{2}[\\.]\\d{2}[\\.]\\d{4}$/i]",
              prompt: "Неправильная дата рождения"
            }
          ]
        },
        phone: {
          identifier: "phone",
          rules: [
            {
              type: "regExp[/^\\+38\\s\\(0\\d{2}\\)\\s\\d{3}\\-\\d{2}\\-\\d{2}$/i]",
              prompt: "Неправильный номер телефона"
            }, {
              type: "empty",
              prompt: "Вы не указали номер телефона"
            }
          ]
        },
        aggree: {
          identifier: "aggree",
          rules: [
            {
              type: "checked",
              prompt: "Так мы не сможем обработать Ваш запрос"
            }
          ]
        }
      }
    });
  };

  return twoStepController;

})();
